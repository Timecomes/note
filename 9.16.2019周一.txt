


   服务器并发量?
   总访问量?
   有没有人处于等待的状态 ?几个?

  集群 基于业务需要
 
          服务器
   代理 服务器
          服务器


   nginx 附加模块
  可以查看 以上 并发量 等数据 (默认不可查看)


    [root@proxy ~]# curl  http://192.168.4.5/status
    Active connections: 1    #并发量
    server accepts handled requests
        10 10 3     #10 10 一般相等 相差过大 dos 
        3次握手 连接总次数     # 3  大约等于 访问量 点击数 刷新数 
    Reading: 0 Writing: 1 Waiting: 0   #是否有等待

Active connections：当前活动的连接数量。

Accepts：已经接受客户端的连接总数量。

Handled：已经处理客户端的连接总数量。

（一般与accepts一致，除非服务器限制了连接数量）。

Requests：客户端发送的请求数量。

Reading：当前服务器正在读取客户端请求头的数量。

Writing：当前服务器正在写响应信息的数量。

Waiting：当前多少客户端在等待服务器的响应。


配置文件做完了 可还是不能 实现
检查 计算机cpu 系统本身不支持 需要修改系统参数

    [root@proxy ~]# vim /usr/local/nginx/conf/nginx.conf
    .. ..
    worker_processes  2;                    //与CPU核心数量一致
    events {
    worker_connections 65535;        //每个worker最大并发连接数
    }
    .. ..





    [root@proxy ~]# nginx -s reload


    [root@proxy ~]# ulimit -a                        //查看所有属性值
    [root@proxy ~]# ulimit -Hn 100000                //设置硬限制（临时规则）
    [root@proxy ~]# ulimit -Sn 100000                //设置软限制（临时规则）
    [root@proxy ~]# vim /etc/security/limits.conf
        .. ..
    *               soft    nofile            100000
    *               hard    nofile            100000
    #该配置文件分4列，分别如下：
    #用户或组    硬限制或软限制    需要限制的项目   限制的值


    [root@proxy ~]# cat lnmp_soft/buffer.sh 
    #!/bin/bash
    URL=http://192.168.4.5/index.html?
    for i in {1..5000}
    do
        URL=${URL}v$i=$i
    done
    curl $URL           
  //经过5000次循环后，生成一个长的URL地址栏
    [root@proxy ~]# ./buffer.sh
    .. ..
    <center><h1>414 Request-URI Too Large</h1></center>        //提示头部信息过大



修改Nginx配置文件，增加数据包头部缓存大小

                          #####     414报错   ######
    [root@proxy ~]# vim /usr/local/nginx/conf/nginx.conf
    .. ..
    http {
    client_header_buffer_size    1k;        //默认请求包头信息的缓存    
    large_client_header_buffers  4 4k;        //大请求包头部信息的缓存个数与容量
    .. ..
    }
    [root@proxy ~]# nginx -s reload


以Firefox浏览器为例，在Firefox地址栏内输入about:cache将显示Firefox浏览器的缓存信息

缓存静态资料(文档) 脚本 动态最好不要缓存(php.java)

location ~ \.(jpg|png|gif)$ {   #以jpg或者png结尾的文件
   expires 30d;  #30天过期
}
打在location上下都行 在 http{}中

------------------------------------------------------------------------

日志切割 单个文件过大

[root@proxy ~]#  mv access.log access2.log
[root@proxy ~]# kill -USR1 $(cat /usr/local/nginx/logs/nginx.pid)

生成新的日志  不关闭程序


[root@proxy ~]# cd /usr/local/nginx/logs/  
                                 #找到日志文件地址
[root@proxy logs]# ls
access.log  error.log  nginx.pid
[root@proxy logs]# mv access.log access2.log  #切割 
[root@proxy logs]# kill -USR1 $(cat nginx.pid) #生成日志
[root@proxy logs]# ls
access2.log  access.log  error.log  nginx.pid


每周5的03点03分自动执行脚本完成日志切割工作
    [root@proxy ~]# vim /usr/local/nginx/logbak.sh
    #!/bin/bash
    date=`date +%Y%m%d`
    logpath=/usr/local/nginx/logs
    mv $logpath/access.log $logpath/access-$date.log
    mv $logpath/error.log $logpath/error-$date.log
    kill -USR1 $(cat $logpath/nginx.pid)
    [root@proxy ~]# crontab -e
    03 03 * * 5  /usr/local/nginx/logbak.sh





    [root@proxy ~]# cat /usr/local/nginx/conf/nginx.conf
    http {
    .. ..
    gzip on;                            //开启压缩
    gzip_min_length 1000;                //小文件不压缩
    gzip_comp_level 4;                //压缩比率
    gzip_types text/plain text/css application/json application/x-javascript text/xml application/xml application/xml+rss text/javascript;
                                        //对特定文件压缩，类型参考mime.types
    .. ..
    }





如果需要处理大量静态文件，可以将文件缓存在内存，下次访问会更快
    http { 
    open_file_cache          max=2000  inactive=20s;
            open_file_cache_valid    60s;
            open_file_cache_min_uses 5;
            open_file_cache_errors   off;
//设置服务器最大缓存2000个文件句柄，关闭20秒内无请求的文件句柄
    //文件句柄的有效时间是60秒，60秒后过期
    //只有访问次数超过5次会被缓存
   //缓存报错不要保存日志
    } 



自动安装 环境
web 1 web 2 动静态网页分离
poxy  轮询动态网址  web 1 web 2

#!/bin/bash      #配的web 的脚本

yum -y install gcc pcre-devel openssl-devel


cd /opt/2/
#tar -xf lnmp_soft.tar.gz 
cd lnmp_soft/
#tar -xf nginx-1.12.2.tar.gz
cd nginx-1.12.2
#./configure --with_ssl_module
make
make install

yum -y install mariadb mariadb-server mariadb-devel
yum -y install php php-fpm php-mysql

sed -i '65,71s/#//' /usr/local/nginx/conf/nginx.conf
sed -i '/SCRIPT_FILENAME/d' /usr/local/nginx/conf/nginx.conf
sed -i 's/fastcgi_params/fastcgi.conf/' /usr/local/nginx/conf/nginx.conf


systemctl stop httpd
systemctl start mariadb
systemctl start php-rpm
/usr/local/nginx/sbin/nginx



                 web 1           
client ---proxy            数据库
                 web 2

把密码验证信息 放入数据库 这样输入密码后 刷新 不用输密码 还能继续访问   














