  git clone git://43.254.90.134/nsd1907.git
 

   yum -y install git

git pull






docker rm $(docker stop XXX)   //删除容器
docker rm $(docker ps -qa)     //删除所有容器
docker rm $(docker stop $(docker ps -qa)) //删除所有容器
docker top 容器进程列表
docker inspect 容器底层信息
docker run -itd docker.io/nginx:latest  
             -d 后台运行

进入daocker
 docker  attach + uuid   >> 直接连接上帝进程 不方便退出
    ctrl+q+p 可以不关闭退出  exit会关闭 上帝进程同时关闭容器
 docker exec + uuid  /bin/bash  >> 进入同时可以启动可交互软件


--------------------
                     自定义镜像 源文件

先在 一个容器中配置yum源安装必要软件和需要的软件
]# yum -y install net-tools iproute psmisc vim-enhanced bash-com*

退出或另起终端  >>>  创建定制的镜像文件
]# docker commit 8b6ewea docker.io/myos:latest
                //此处为上一步容器的 id号

创建成功后 在镜像处查看

]# docker images 
REPOSITORY                   TAG 
docker.io/myos               latest   

-----------------------
                  使用Docker脚本文件 运行Docker程序

FROM  docker.io/myos:latest
RUN 容器内运行
ADD  导入文件进入容器 
     本地（且与Docker文件在同一路径下） +  容器内路径


]# mkdir dc
]# cd dc
]# touch Dockerfile
]# ls
Dockerfile  local.repo
]# cat Dockerfile
FROM docker.io/centos:latest
RUN rm -rf /etc/yum.repos.d/*
ADD local.repo /etc/yum.repos.d/local.repo
RUN yum -y install net-tools iproute psmisc vim-enhanced bash-com*

CMD ["/bin/bash"]    >>默认启动参数

想 启动参数 为 /bin/ls -l -a
 ----->  CMD ["/bin/ls","-l","-a"]   命令不识别空格 只能 "XXX" 隔开

]# docker build -t docker.io/myos:http .
            启动 脚本      定义文件名：标签  . 定义当前文件位置


]# yum search ssh   查看已有命令的rpm安装包
]# yum provides   /XXXX/XXXX/XXX  缺失文件找不到 yum找
当yum源提示缺失文件时使用


WORKDIR 永久cd到目录


               ]#  Dockerfile
FROM docker:latest
RUN yum -y install httpd
WORKDIR /var/www/html/
ADD index.html index.html
EXPOSE 80
CMD [""]







]# cat /etc/sysconfig/network-scripts/ifcfg-eth0 
TYPE=Ethernet
PROXY_METHOD=none
BROWSER_ONLY=no
BOOTPROTO=none
DEFROUTE=yes
NAME=eth0
DEVICE=eth0
ONBOOT=yes

# Generated by dracut initrd
DEVICE="eth0"
ONBOOT="yes"
NM_CONTROLLED="no"
TYPE="Ethernet"
BOOTPROTO="static"
IPADDR="192.168.1.44"
NETMASK="255.255.255.0"
GATEWAY="192.168.1.254"



]# cat /etc/sysconfig/network-scripts/ifcfg-eth0              
TYPE=Ethernet
PROXY_METHOD=none
BROWSER_ONLY=no
BOOTPROTO=none
DEFROUTE=yes
NAME=eth0
DEVICE=eth0
ONBOOT=yes
IPADDR=192.168.1.155       //增加的
PREFIX=24                  //电子掩码
GATEWAY=192.168.1.254      //网关
IPV4_FAILURE_FATAL=yes     //ipv4
IPV6INIT=no
UUID=5fb06bd0-0bb0-7ffb-45f1-d6edd65f3e03
--------------------------------------------
                       eip 简单设置ip 
#!/usr/bin/python
import os, sys

def conf_ip(ip):
    iplist = []
    f = open("/etc/sysconfig/network-scripts/ifcfg-eth0", "r+")
    for i in f:
        if  'PERSISTENT_DHCLIENT' in i: continue
        iplist.append('BOOTPROTO="static"\n' if 'BOOTPROTO=' in i else i)
    iplist.extend(['IPADDR="192.168.1.{0}"\n'.format(ip),'NETMASK="255.255.255.00
"\n','GATEWAY="192.168.1.254"\n'])
    f.seek(0,0)
    f.writelines(iplist)
    f.truncate()
    f.close()
if  __name__ == '__main__':
    if  len(sys.argv) == 2 and sys.argv[1].isdigit():
        conf_ip(sys.argv[1])
        os.remove(sys.argv[0])



-------------------------------------

创建 docker 仓库
 docker仓库服务器 安装

 docker客户端定义 服务器地址


上传 docker镜像（images） 到 仓库

]# for i in {123,myos,nginx,centos}
> do
> docker tag docker.io/$i:latest 192.168.1.137:5000/$i:latest
                //创建标签
> docker push 192.168.1.137:5000/$i:latest
                //上传
> done



--------------------
创建共享 逻辑卷 以保存数据 真机目录映射给 docker容器

docker run -v /var/www/html:/ooxx docker.io/myos:latest
                  真机文件：容器文件   
             文件存在 就覆盖 不存在就创建
         

docker0 (交换机)       docker1 
172.17.0.2             10.10.10.2
172.17.0.3             10.10.10.3

创建docker1（交换机）
docker nwetwork create --subnet=10.10.10.0/24 docker1

创建 与docker0 连接的容器
docker run -it myos:latest


创建与docker1 连接的容器
docker run -it --network=docker1 myos:latest





docker 容器中服务替换宿主机  容器与宿主机端口绑定
docker run -it -p 80:80 docker.io/nginx:latest
               宿主机端口：容器端口
实现 外部对 容器的直接访问


