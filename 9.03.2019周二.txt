  



            条件测试   给予错误出路  
     : test + 测试语句   [  测试语句  ]        [ a==a ] 错误无提示
        if  结构  
        for 结构  
      while 结构  
注 当循环中有exit时 不要用当前解释器 会退出远程机 回到真实机
    条件测试
     test a == a
      echo $?   >>  0
     test b == a
      echo $?   >>  1
 
    [ $USER == root ]        
      echo $?   >>  0
    [ a != a ]
      echo $?   >>  1


                 "  &&  " 并且   成功为真  
                 "   ||   "  或者   失败为真 
           ==   !=   -z  为空
 
        -e -d -f -r -w -x    
  逻辑符号   &&  ----  ||

  [ -e /etc ]  #判断/etc目录是否存在

   -z:不存在为真
   -gt：大于
   -ge：大于等于                    
   -eq：等于
   -ne：不等于
   -lt：小于
   -le：小于等于

       <   : 输入重定向

  diff file1 file2   >>对比文档内容
-b 将 空格转换称tab
-e 


    -e :判断文件是否存在,不关心文件类型
    -d :判断目录是否存在
    -f :判断文件是否存在
   -r -w -x   文件是否有此权限   [  -r 123 ] 当前目录下存在文件123
 
  -r -w 权限 对管理员无效   输出为运行成功的
       对普通用户生效   一个判断中 只能有一个参数核对应的表达式
         不能多个参数一起实现  [  -rwx  123 ] 命令将不可实现

   -e:存在为真
   -d:存在，且必须为目录才为真
   -f:存在，且必须为文件才为真



[ $USER != root ] && echo "你不是管理员,退出"  &&  exit
                                前成功 执行echo        前整体成功 执行e
       ls &&  ls  &&  ls  >>>三次 ls
       ls ||  ls  &&  ls  >>>两次 ls
              " || "  该符号最终结果为前方  整体相关 且 该符号有一成功 
    则判定为 成功 当没有输出时 前 方判断 可能为  真真 真假 
    只要有一真 该符号 整体为真 且没有后方才输出
                                                 
   ls  a || ls b && ls c    >> a 存在 b 存在 c 存在
   >>输出结果>>      a    c 
 
   ls  a || ls b || ls c     a为真 ||号后不输出结果 
  >>输出结果>>       a      ls a || ls b  ls输出为真 c 不输出     

   ls  a && ls b || ls c
 >> 输出结果>>       a    b 


  [ $USER == root ] && echo "我是管理员" || echo "我不是管理员"

  当不是 root 用户时 --------
  是root时 -------


     [ - z $a ] 是否为空

     [ ! - z $a ] 是否不为空

     who | wc -l    统计当前用户几人
            wc 统计   -l  行数




#!/bin/bash
n=`who | wc -l`   # 查看当前用户 并统计人数
[ $n -gt 3 ] && echo "有人入侵服务器!" | mail -s test root
当人数大于3时  发送邮件给 root用户

crontab -e 
  */2 * * * * /opt/xx.sh   >> 要给与执行权限
          每两分钟 运行一次


      ping  -c 3 172.25.0.10

        ping命令 -c 可以选定ping的次数 默认无限
                -i ping的间隔时间  默认 1  >>   0.2 
                -W 快速反馈结果 默认3min >> 1
                                                              
      ping -c 3 -i 0.2 -W 1 172.25.0.13



      $RANDOM 环境变量  随机数字

     roll骰子?  $[RANDOM%7]


 for循环

  for  变量名称  in 值1 值2 值3
     do
                执行指令
     done

      循环次数 和值有关   循环式的变量 和值有关
  值1 值2 值3 为什么不重要 重要的时存在 几个值

for i in a b c / {1..10}  {1..$a}>>识别不了只能识别为一个整体
do
  echo "ILDC $i"  >>输出 a b c

done

   seq 10  输出 1-10 个数 >> 支持变量

    a=10
    seq$a

 #!/bin/bash
  a=10086
   for i in `seq $a`    反撇号取结果 输出了10086个数
    do
     echo "ILDC $i"
     sleep 0.01
    done



#!/bin/bash
a=0
b=0
for i in {1..15}
do
  ping -c 3 -i 0.02 -W 1  172.25.0.$i  &> /dev/null
         # ping 1-15 个数 循环 实现
  if [ $? -eq 0 ] ;then
    echo "你172.25.0.$i 通通通了"   
       let a++       #自加减 let 可以用于变量
  else
    echo "你172.25.0.$i 没通啊"  
        let b++        #计算该命令执行了几次
  fi

done
echo "通了 $a 个"
echo "没通 $b 个"

---------------------------------------

 while循环
     
   while :   >>>返回值为0 无限循环





#!/bin/bash

x=$[RANDOM%101]
y=0
while :      #无限循环
do
   read -p "玩点大的赌你没有101 :" n     #输入数字
   if [ $x -eq $n ];then           #判断输入与随机之间关系
      echo " ??? 你开挂了吧"
      echo "土块的头衔就决定给你了"
       let y++                        #循环几次
      echo "失敬失敬也就猜了$y次吧"
          exit                     #条件达到结束循环
   elif [ $n -lt $x ];then      #[ $x -gt $n ]
      echo "没牌面,你觉得呢 要不梭哈了吧"
       let y++
   else
      echo "玩的挺大的啊 要不起"
       let y++
    fi
done














